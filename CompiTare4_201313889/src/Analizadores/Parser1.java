
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Mar 14 23:12:43 CST 2016
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import Acciones.ErrorT;
import Acciones.Token;
import compi1tarea4_201313889.Principal;
import java.io.*;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Mar 14 23:12:43 CST 2016
  */
public class Parser1 extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser1() {super();}

  /** Constructor which sets the default scanner. */
  public Parser1(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser1(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\061\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\003\005\000\002\003\012\000\002\003\003" +
    "\000\002\006\006\000\002\006\006\000\002\006\002\000" +
    "\002\007\004\000\002\007\003\000\002\007\002\000\002" +
    "\010\006\000\002\010\006\000\002\010\003\000\002\010" +
    "\002\000\002\011\006\000\002\011\006\000\002\011\006" +
    "\000\002\011\006\000\002\011\006\000\002\011\007\000" +
    "\002\011\006\000\002\011\003\000\002\011\002\000\002" +
    "\012\010\000\002\012\010\000\002\012\012\000\002\012" +
    "\014\000\002\013\005\000\002\013\004\000\002\013\002" +
    "\000\002\004\005\000\002\004\005\000\002\004\005\000" +
    "\002\004\005\000\002\004\006\000\002\004\006\000\002" +
    "\004\004\000\002\004\004\000\002\004\005\000\002\004" +
    "\005\000\002\004\005\000\002\004\005\000\002\004\005" +
    "\000\002\004\005\000\002\004\003\000\002\004\003\000" +
    "\002\004\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\170\000\010\003\006\031\007\056\005\001\002\000" +
    "\004\002\000\001\002\000\004\061\126\001\002\000\012" +
    "\002\ufffc\003\006\031\007\056\005\001\002\000\010\032" +
    "\ufff9\033\013\042\014\001\002\000\004\002\011\001\002" +
    "\000\004\002\001\001\002\000\004\032\124\001\002\000" +
    "\012\003\112\034\ufff2\035\ufff2\037\ufff2\001\002\000\024" +
    "\003\015\035\uffe9\037\uffe9\043\uffe9\044\uffe9\046\uffe9\050" +
    "\uffe9\052\uffe9\054\uffe9\001\002\000\022\035\uffea\037\uffea" +
    "\043\uffea\044\uffea\046\uffea\050\uffea\052\uffea\054\uffea\001" +
    "\002\000\022\035\024\037\021\043\026\044\017\046\023" +
    "\050\025\052\020\054\022\001\002\000\020\010\033\011" +
    "\037\015\035\017\032\066\030\067\031\071\036\001\002" +
    "\000\020\010\033\011\037\015\035\017\032\066\030\067" +
    "\031\071\036\001\002\000\020\010\033\011\037\015\035" +
    "\017\032\066\030\067\031\071\036\001\002\000\020\010" +
    "\033\011\037\015\035\017\032\066\030\067\031\071\036" +
    "\001\002\000\020\010\033\011\037\015\035\017\032\066" +
    "\030\067\031\071\036\001\002\000\020\010\033\011\037" +
    "\015\035\017\032\066\030\067\031\071\036\001\002\000" +
    "\020\010\033\011\037\015\035\017\032\066\030\067\031" +
    "\071\036\001\002\000\010\032\ufff9\033\013\042\014\001" +
    "\002\000\004\032\ufffa\001\002\000\074\004\uffd3\005\uffd3" +
    "\006\uffd3\007\uffd3\010\uffd3\011\uffd3\012\uffd3\013\uffd3\014" +
    "\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3\023\uffd3\024\uffd3" +
    "\025\uffd3\026\uffd3\027\uffd3\030\uffd3\036\uffd3\040\uffd3\041" +
    "\uffd3\045\uffd3\047\uffd3\051\uffd3\055\uffd3\066\uffd3\067\uffd3" +
    "\071\uffd3\001\002\000\074\004\uffd1\005\uffd1\006\uffd1\007" +
    "\uffd1\010\uffd1\011\uffd1\012\uffd1\013\uffd1\014\uffd1\015\uffd1" +
    "\016\uffd1\017\uffd1\020\uffd1\023\uffd1\024\uffd1\025\uffd1\026" +
    "\uffd1\027\uffd1\030\uffd1\036\uffd1\040\uffd1\041\uffd1\045\uffd1" +
    "\047\uffd1\051\uffd1\055\uffd1\066\uffd1\067\uffd1\071\uffd1\001" +
    "\002\000\020\010\033\011\037\015\035\017\032\066\030" +
    "\067\031\071\036\001\002\000\004\015\070\001\002\000" +
    "\030\004\052\005\045\006\050\007\042\023\053\024\046" +
    "\025\043\026\051\027\054\030\047\051\067\001\002\000" +
    "\020\010\033\011\037\015\035\017\032\066\030\067\031" +
    "\071\036\001\002\000\074\004\uffd2\005\uffd2\006\uffd2\007" +
    "\uffd2\010\uffd2\011\uffd2\012\uffd2\013\uffd2\014\uffd2\015\uffd2" +
    "\016\uffd2\017\uffd2\020\uffd2\023\uffd2\024\uffd2\025\uffd2\026" +
    "\uffd2\027\uffd2\030\uffd2\036\uffd2\040\uffd2\041\uffd2\045\uffd2" +
    "\047\uffd2\051\uffd2\055\uffd2\066\uffd2\067\uffd2\071\uffd2\001" +
    "\002\000\004\015\040\001\002\000\020\010\033\011\037" +
    "\015\035\017\032\066\030\067\031\071\036\001\002\000" +
    "\030\004\052\005\045\006\050\007\042\016\044\023\053" +
    "\024\046\025\043\026\051\027\054\030\047\001\002\000" +
    "\020\010\033\011\037\015\035\017\032\066\030\067\031" +
    "\071\036\001\002\000\020\010\033\011\037\015\035\017" +
    "\032\066\030\067\031\071\036\001\002\000\074\004\uffdc" +
    "\005\uffdc\006\uffdc\007\uffdc\010\uffdc\011\uffdc\012\uffdc\013" +
    "\uffdc\014\uffdc\015\uffdc\016\uffdc\017\uffdc\020\uffdc\023\uffdc" +
    "\024\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc\036\uffdc\040" +
    "\uffdc\041\uffdc\045\uffdc\047\uffdc\051\uffdc\055\uffdc\066\uffdc" +
    "\067\uffdc\071\uffdc\001\002\000\020\010\033\011\037\015" +
    "\035\017\032\066\030\067\031\071\036\001\002\000\020" +
    "\010\033\011\037\015\035\017\032\066\030\067\031\071" +
    "\036\001\002\000\074\004\uffda\005\uffda\006\uffda\007\uffda" +
    "\010\uffda\011\uffda\012\uffda\013\uffda\014\uffda\015\uffda\016" +
    "\uffda\017\uffda\020\uffda\023\uffda\024\uffda\025\uffda\026\uffda" +
    "\027\uffda\030\uffda\036\uffda\040\uffda\041\uffda\045\uffda\047" +
    "\uffda\051\uffda\055\uffda\066\uffda\067\uffda\071\uffda\001\002" +
    "\000\020\010\033\011\037\015\035\017\032\066\030\067" +
    "\031\071\036\001\002\000\020\010\033\011\037\015\035" +
    "\017\032\066\030\067\031\071\036\001\002\000\020\010" +
    "\033\011\037\015\035\017\032\066\030\067\031\071\036" +
    "\001\002\000\020\010\033\011\037\015\035\017\032\066" +
    "\030\067\031\071\036\001\002\000\074\004\uffdb\005\uffdb" +
    "\006\uffdb\007\uffdb\010\uffdb\011\uffdb\012\uffdb\013\uffdb\014" +
    "\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb\023\uffdb\024\uffdb" +
    "\025\uffdb\026\uffdb\027\uffdb\030\uffdb\036\uffdb\040\uffdb\041" +
    "\uffdb\045\uffdb\047\uffdb\051\uffdb\055\uffdb\066\uffdb\067\uffdb" +
    "\071\uffdb\001\002\000\074\004\052\005\045\006\050\007" +
    "\042\010\uffd8\011\uffd8\012\uffd8\013\uffd8\014\uffd8\015\uffd8" +
    "\016\uffd8\017\uffd8\020\uffd8\023\uffd8\024\uffd8\025\uffd8\026" +
    "\uffd8\027\uffd8\030\uffd8\036\uffd8\040\uffd8\041\uffd8\045\uffd8" +
    "\047\uffd8\051\uffd8\055\uffd8\066\uffd8\067\uffd8\071\uffd8\001" +
    "\002\000\074\004\uffe1\005\uffe1\006\050\007\042\010\uffe1" +
    "\011\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1\016\uffe1\017" +
    "\uffe1\020\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1" +
    "\030\uffe1\036\uffe1\040\uffe1\041\uffe1\045\uffe1\047\uffe1\051" +
    "\uffe1\055\uffe1\066\uffe1\067\uffe1\071\uffe1\001\002\000\074" +
    "\004\052\005\045\006\050\007\042\010\uffd7\011\uffd7\012" +
    "\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7" +
    "\023\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7\036" +
    "\uffd7\040\uffd7\041\uffd7\045\uffd7\047\uffd7\051\uffd7\055\uffd7" +
    "\066\uffd7\067\uffd7\071\uffd7\001\002\000\074\004\uffdf\005" +
    "\uffdf\006\uffdf\007\uffdf\010\uffdf\011\uffdf\012\uffdf\013\uffdf" +
    "\014\uffdf\015\uffdf\016\uffdf\017\uffdf\020\uffdf\023\uffdf\024" +
    "\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf\036\uffdf\040\uffdf" +
    "\041\uffdf\045\uffdf\047\uffdf\051\uffdf\055\uffdf\066\uffdf\067" +
    "\uffdf\071\uffdf\001\002\000\074\004\052\005\045\006\050" +
    "\007\042\010\uffd9\011\uffd9\012\uffd9\013\uffd9\014\uffd9\015" +
    "\uffd9\016\uffd9\017\uffd9\020\uffd9\023\uffd9\024\uffd9\025\uffd9" +
    "\026\uffd9\027\uffd9\030\uffd9\036\uffd9\040\uffd9\041\uffd9\045" +
    "\uffd9\047\uffd9\051\uffd9\055\uffd9\066\uffd9\067\uffd9\071\uffd9" +
    "\001\002\000\074\004\uffe0\005\uffe0\006\050\007\042\010" +
    "\uffe0\011\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0\016\uffe0" +
    "\017\uffe0\020\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0\027" +
    "\uffe0\030\uffe0\036\uffe0\040\uffe0\041\uffe0\045\uffe0\047\uffe0" +
    "\051\uffe0\055\uffe0\066\uffe0\067\uffe0\071\uffe0\001\002\000" +
    "\074\004\052\005\045\006\050\007\042\010\uffd6\011\uffd6" +
    "\012\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6\017\uffd6\020" +
    "\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6" +
    "\036\uffd6\040\uffd6\041\uffd6\045\uffd6\047\uffd6\051\uffd6\055" +
    "\uffd6\066\uffd6\067\uffd6\071\uffd6\001\002\000\074\004\uffde" +
    "\005\uffde\006\uffde\007\uffde\010\uffde\011\uffde\012\uffde\013" +
    "\uffde\014\uffde\015\uffde\016\uffde\017\uffde\020\uffde\023\uffde" +
    "\024\uffde\025\uffde\026\uffde\027\uffde\030\uffde\036\uffde\040" +
    "\uffde\041\uffde\045\uffde\047\uffde\051\uffde\055\uffde\066\uffde" +
    "\067\uffde\071\uffde\001\002\000\030\004\052\005\045\006" +
    "\050\007\042\016\066\023\053\024\046\025\043\026\051" +
    "\027\054\030\047\001\002\000\074\004\uffd5\005\uffd5\006" +
    "\uffd5\007\uffd5\010\uffd5\011\uffd5\012\uffd5\013\uffd5\014\uffd5" +
    "\015\uffd5\016\uffd5\017\uffd5\020\uffd5\023\uffd5\024\uffd5\025" +
    "\uffd5\026\uffd5\027\uffd5\030\uffd5\036\uffd5\040\uffd5\041\uffd5" +
    "\045\uffd5\047\uffd5\051\uffd5\055\uffd5\066\uffd5\067\uffd5\071" +
    "\uffd5\001\002\000\022\035\uffed\037\uffed\043\uffed\044\uffed" +
    "\046\uffed\050\uffed\052\uffed\054\uffed\001\002\000\020\010" +
    "\033\011\037\015\035\017\032\066\030\067\031\071\036" +
    "\001\002\000\030\004\052\005\045\006\050\007\042\016" +
    "\072\023\053\024\046\025\043\026\051\027\054\030\047" +
    "\001\002\000\074\004\uffdd\005\uffdd\006\uffdd\007\uffdd\010" +
    "\uffdd\011\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd\016\uffdd" +
    "\017\uffdd\020\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd\027" +
    "\uffdd\030\uffdd\036\uffdd\040\uffdd\041\uffdd\045\uffdd\047\uffdd" +
    "\051\uffdd\055\uffdd\066\uffdd\067\uffdd\071\uffdd\001\002\000" +
    "\030\004\052\005\045\006\050\007\042\020\074\023\053" +
    "\024\046\025\043\026\051\027\054\030\047\001\002\000" +
    "\074\004\uffd4\005\uffd4\006\uffd4\007\uffd4\010\uffd4\011\uffd4" +
    "\012\uffd4\013\uffd4\014\uffd4\015\uffd4\016\uffd4\017\uffd4\020" +
    "\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4" +
    "\036\uffd4\040\uffd4\041\uffd4\045\uffd4\047\uffd4\051\uffd4\055" +
    "\uffd4\066\uffd4\067\uffd4\071\uffd4\001\002\000\030\004\052" +
    "\005\045\006\050\007\042\023\053\024\046\025\043\026" +
    "\051\027\054\030\047\036\076\001\002\000\022\035\ufff1" +
    "\037\ufff1\043\ufff1\044\ufff1\046\ufff1\050\ufff1\052\ufff1\054" +
    "\ufff1\001\002\000\030\004\052\005\045\006\050\007\042" +
    "\023\053\024\046\025\043\026\051\027\054\030\047\047" +
    "\100\001\002\000\022\035\uffef\037\uffef\043\uffef\044\uffef" +
    "\046\uffef\050\uffef\052\uffef\054\uffef\001\002\000\030\004" +
    "\052\005\045\006\050\007\042\023\053\024\046\025\043" +
    "\026\051\027\054\030\047\055\102\001\002\000\022\035" +
    "\uffeb\037\uffeb\043\uffeb\044\uffeb\046\uffeb\050\uffeb\052\uffeb" +
    "\054\uffeb\001\002\000\030\004\052\005\045\006\050\007" +
    "\042\023\053\024\046\025\043\026\051\027\054\030\047" +
    "\040\104\001\002\000\022\035\uffee\037\uffee\043\uffee\044" +
    "\uffee\046\uffee\050\uffee\052\uffee\054\uffee\001\002\000\030" +
    "\004\052\005\045\006\050\007\042\023\053\024\046\025" +
    "\043\026\051\027\054\030\047\041\106\001\002\000\004" +
    "\053\107\001\002\000\022\035\uffec\037\uffec\043\uffec\044" +
    "\uffec\046\uffec\050\uffec\052\uffec\054\uffec\001\002\000\030" +
    "\004\052\005\045\006\050\007\042\023\053\024\046\025" +
    "\043\026\051\027\054\030\047\045\111\001\002\000\022" +
    "\035\ufff0\037\ufff0\043\ufff0\044\ufff0\046\ufff0\050\ufff0\052" +
    "\ufff0\054\ufff0\001\002\000\010\034\ufff3\035\ufff3\037\ufff3" +
    "\001\002\000\010\034\116\035\115\037\114\001\002\000" +
    "\020\010\033\011\037\015\035\017\032\066\030\067\031" +
    "\071\036\001\002\000\020\010\033\011\037\015\035\017" +
    "\032\066\030\067\031\071\036\001\002\000\010\032\ufff9" +
    "\033\013\042\014\001\002\000\004\032\ufffb\001\002\000" +
    "\030\004\052\005\045\006\050\007\042\023\053\024\046" +
    "\025\043\026\051\027\054\030\047\036\121\001\002\000" +
    "\010\034\ufff5\035\ufff5\037\ufff5\001\002\000\030\004\052" +
    "\005\045\006\050\007\042\023\053\024\046\025\043\026" +
    "\051\027\054\030\047\040\123\001\002\000\010\034\ufff4" +
    "\035\ufff4\037\ufff4\001\002\000\004\002\ufffe\001\002\000" +
    "\004\002\uffff\001\002\000\004\057\127\001\002\000\004" +
    "\012\130\001\002\000\004\067\131\001\002\000\004\056" +
    "\132\001\002\000\026\003\135\010\033\011\037\015\035" +
    "\017\032\060\133\062\ufff6\066\030\067\031\071\036\001" +
    "\002\000\020\010\033\011\037\015\035\017\032\066\030" +
    "\067\031\071\036\001\002\000\026\003\135\010\033\011" +
    "\037\015\035\017\032\060\133\062\ufff6\066\030\067\031" +
    "\071\036\001\002\000\004\062\ufff7\001\002\000\004\062" +
    "\164\001\002\000\030\004\052\005\045\006\050\007\042" +
    "\015\140\023\053\024\046\025\043\026\051\027\054\030" +
    "\047\001\002\000\020\010\033\011\037\015\035\017\032" +
    "\066\030\067\031\071\036\001\002\000\032\004\052\005" +
    "\045\006\050\007\042\013\142\016\143\023\053\024\046" +
    "\025\043\026\051\027\054\030\047\001\002\000\022\010" +
    "\033\011\037\015\035\016\uffe2\017\032\066\030\067\031" +
    "\071\036\001\002\000\006\012\144\014\145\001\002\000" +
    "\020\010\033\011\037\015\035\017\032\066\030\067\031" +
    "\071\036\001\002\000\022\010\033\011\037\015\035\017" +
    "\032\060\133\066\030\067\031\071\036\001\002\000\026" +
    "\003\uffe7\010\uffe7\011\uffe7\015\uffe7\017\uffe7\060\uffe7\062" +
    "\uffe7\066\uffe7\067\uffe7\071\uffe7\001\002\000\030\004\052" +
    "\005\045\006\050\007\042\014\150\023\053\024\046\025" +
    "\043\026\051\027\054\030\047\001\002\000\022\010\033" +
    "\011\037\015\035\017\032\060\133\066\030\067\031\071" +
    "\036\001\002\000\026\003\uffe6\010\uffe6\011\uffe6\015\uffe6" +
    "\017\uffe6\060\uffe6\062\uffe6\066\uffe6\067\uffe6\071\uffe6\001" +
    "\002\000\004\016\157\001\002\000\050\004\052\005\045" +
    "\006\050\007\042\010\033\011\037\013\154\015\035\016" +
    "\uffe2\017\032\023\053\024\046\025\043\026\051\027\054" +
    "\030\047\066\030\067\031\071\036\001\002\000\022\010" +
    "\033\011\037\015\035\016\uffe2\017\032\066\030\067\031" +
    "\071\036\001\002\000\004\016\uffe3\001\002\000\004\016" +
    "\uffe4\001\002\000\004\012\160\001\002\000\020\010\033" +
    "\011\037\015\035\017\032\066\030\067\031\071\036\001" +
    "\002\000\030\004\052\005\045\006\050\007\042\014\162" +
    "\023\053\024\046\025\043\026\051\027\054\030\047\001" +
    "\002\000\022\010\033\011\037\015\035\017\032\060\133" +
    "\066\030\067\031\071\036\001\002\000\026\003\uffe5\010" +
    "\uffe5\011\uffe5\015\uffe5\017\uffe5\060\uffe5\062\uffe5\066\uffe5" +
    "\067\uffe5\071\uffe5\001\002\000\004\002\ufffd\001\002\000" +
    "\004\062\ufff8\001\002\000\030\004\052\005\045\006\050" +
    "\007\042\012\167\023\053\024\046\025\043\026\051\027" +
    "\054\030\047\001\002\000\020\010\033\011\037\015\035" +
    "\017\032\066\030\067\031\071\036\001\002\000\030\004" +
    "\052\005\045\006\050\007\042\014\171\023\053\024\046" +
    "\025\043\026\051\027\054\030\047\001\002\000\022\010" +
    "\033\011\037\015\035\017\032\060\133\066\030\067\031" +
    "\071\036\001\002\000\026\003\uffe8\010\uffe8\011\uffe8\015" +
    "\uffe8\017\uffe8\060\uffe8\062\uffe8\066\uffe8\067\uffe8\071\uffe8" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\170\000\006\002\007\003\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\002\124\003\003\001\001" +
    "\000\004\006\011\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\112\001\001\000\004" +
    "\011\015\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\107\001\001\000\004\004\104\001\001\000\004" +
    "\004\102\001\001\000\004\004\100\001\001\000\004\004" +
    "\076\001\001\000\004\004\074\001\001\000\004\004\033" +
    "\001\001\000\004\006\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\072\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\064\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\040" +
    "\001\001\000\002\001\001\000\004\004\063\001\001\000" +
    "\004\004\062\001\001\000\002\001\001\000\004\004\061" +
    "\001\001\000\004\004\060\001\001\000\002\001\001\000" +
    "\004\004\057\001\001\000\004\004\056\001\001\000\004" +
    "\004\055\001\001\000\004\004\054\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\070\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\121\001\001\000\004\004\117\001\001\000\004\006\116" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\004\136\007\135" +
    "\012\133\001\001\000\004\004\165\001\001\000\010\004" +
    "\136\007\164\012\133\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\140\001\001\000" +
    "\002\001\001\000\006\004\152\013\151\001\001\000\002" +
    "\001\001\000\004\004\146\001\001\000\006\004\136\012" +
    "\145\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\004\136\012\150\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\004\152\013\154\001\001\000\006\004\152" +
    "\013\155\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\160\001\001\000\002\001\001" +
    "\000\006\004\136\012\162\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\167\001\001\000\002\001\001\000\006\004\136\012" +
    "\171\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser1$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser1$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser1$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  
    public Nodo raiz;
    public Principal archivoA;
    public String resultado="";

    //** Metodo al que se llama automaticamente ante algun error sintactico.*/
    public void syntax_error(Symbol s)
    {        
        System.out.println("Error Sintactico Recuperado /////// lexema: " +s.value+ " Fila: " +s.right+ " Columna: "+s.left);
        ErrorT denegado = new ErrorT(s.value.toString(), s.right,s.left,"ERROR SINTACTICO" ,"Lexema Invalido");
        archivoA.lista_errores.add(denegado);
    }

    /**Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores.*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        System.out.println("Error Sintactico Panico ////// Lexema: " +s.value+" Fila: "+s.right+ " Columna: "+s.left);
        ErrorT denegado = new ErrorT(s.value.toString(), s.right,s.left,"ERROR SINTACTICO" ,"Lexema Invalido");
        archivoA.lista_errores.add(denegado);
    }

    public void semantic(Symbol cur_token, String n) 
    {
        System.out.println("error semantico ");
    }

    public void semantic(String msg, Object obj) {}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser1$actions {



    public ArrayList<Token> lista_reservadasB = new ArrayList<>();
    public void guardarReservada(String valor, int linea, int columna, String descripcion)
    {
        lista_reservadasB.add(new Token(valor, linea, columna, descripcion));
    }

  private final Parser1 parser;

  /** Constructor */
  CUP$Parser1$actions(Parser1 parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser1$do_action(
    int                        CUP$Parser1$act_num,
    java_cup.runtime.lr_parser CUP$Parser1$parser,
    java.util.Stack            CUP$Parser1$stack,
    int                        CUP$Parser1$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser1$result;

      /* select the action based on the action number */
      switch (CUP$Parser1$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // E ::= tstring 
            {
              Nodo RESULT =null;

              CUP$Parser1$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$Parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser1$stack.peek()), RESULT);
            }
          return CUP$Parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // E ::= id 
            {
              Nodo RESULT =null;

              CUP$Parser1$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$Parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser1$stack.peek()), RESULT);
            }
          return CUP$Parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // E ::= numero 
            {
              Nodo RESULT =null;

              CUP$Parser1$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$Parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser1$stack.peek()), RESULT);
            }
          return CUP$Parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // E ::= llaveIzq E llaveDer 
            {
              Nodo RESULT =null;

              CUP$Parser1$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$Parser1$stack.elementAt(CUP$Parser1$top-2)), ((java_cup.runtime.Symbol)CUP$Parser1$stack.peek()), RESULT);
            }
          return CUP$Parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // E ::= parentesisIzq E parentesisDer 
            {
              Nodo RESULT =null;

              CUP$Parser1$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$Parser1$stack.elementAt(CUP$Parser1$top-2)), ((java_cup.runtime.Symbol)CUP$Parser1$stack.peek()), RESULT);
            }
          return CUP$Parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // E ::= E mayorigual E 
            {
              Nodo RESULT =null;

              CUP$Parser1$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$Parser1$stack.elementAt(CUP$Parser1$top-2)), ((java_cup.runtime.Symbol)CUP$Parser1$stack.peek()), RESULT);
            }
          return CUP$Parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // E ::= E menorigual E 
            {
              Nodo RESULT =null;

              CUP$Parser1$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$Parser1$stack.elementAt(CUP$Parser1$top-2)), ((java_cup.runtime.Symbol)CUP$Parser1$stack.peek()), RESULT);
            }
          return CUP$Parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // E ::= E mayor E 
            {
              Nodo RESULT =null;

              CUP$Parser1$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$Parser1$stack.elementAt(CUP$Parser1$top-2)), ((java_cup.runtime.Symbol)CUP$Parser1$stack.peek()), RESULT);
            }
          return CUP$Parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // E ::= E menor E 
            {
              Nodo RESULT =null;

              CUP$Parser1$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$Parser1$stack.elementAt(CUP$Parser1$top-2)), ((java_cup.runtime.Symbol)CUP$Parser1$stack.peek()), RESULT);
            }
          return CUP$Parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // E ::= E menosmenos 
            {
              Nodo RESULT =null;

              CUP$Parser1$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$Parser1$stack.elementAt(CUP$Parser1$top-1)), ((java_cup.runtime.Symbol)CUP$Parser1$stack.peek()), RESULT);
            }
          return CUP$Parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // E ::= E masmas 
            {
              Nodo RESULT =null;

              CUP$Parser1$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$Parser1$stack.elementAt(CUP$Parser1$top-1)), ((java_cup.runtime.Symbol)CUP$Parser1$stack.peek()), RESULT);
            }
          return CUP$Parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // E ::= Ptn parentesisIzq E parentesisDer 
            {
              Nodo RESULT =null;

              CUP$Parser1$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$Parser1$stack.elementAt(CUP$Parser1$top-3)), ((java_cup.runtime.Symbol)CUP$Parser1$stack.peek()), RESULT);
            }
          return CUP$Parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // E ::= Rq parentesisIzq E parentesisDer 
            {
              Nodo RESULT =null;

              CUP$Parser1$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$Parser1$stack.elementAt(CUP$Parser1$top-3)), ((java_cup.runtime.Symbol)CUP$Parser1$stack.peek()), RESULT);
            }
          return CUP$Parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // E ::= E div E 
            {
              Nodo RESULT =null;

              CUP$Parser1$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$Parser1$stack.elementAt(CUP$Parser1$top-2)), ((java_cup.runtime.Symbol)CUP$Parser1$stack.peek()), RESULT);
            }
          return CUP$Parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // E ::= E por E 
            {
              Nodo RESULT =null;

              CUP$Parser1$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$Parser1$stack.elementAt(CUP$Parser1$top-2)), ((java_cup.runtime.Symbol)CUP$Parser1$stack.peek()), RESULT);
            }
          return CUP$Parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // E ::= E menos E 
            {
              Nodo RESULT =null;

              CUP$Parser1$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$Parser1$stack.elementAt(CUP$Parser1$top-2)), ((java_cup.runtime.Symbol)CUP$Parser1$stack.peek()), RESULT);
            }
          return CUP$Parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // E ::= E mas E 
            {
              Nodo RESULT =null;

              CUP$Parser1$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$Parser1$stack.elementAt(CUP$Parser1$top-2)), ((java_cup.runtime.Symbol)CUP$Parser1$stack.peek()), RESULT);
            }
          return CUP$Parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // AUXCONSTANTESYPARAMETROS ::= 
            {
              Nodo RESULT =null;

              CUP$Parser1$result = parser.getSymbolFactory().newSymbol("AUXCONSTANTESYPARAMETROS",9, ((java_cup.runtime.Symbol)CUP$Parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser1$stack.peek()), RESULT);
            }
          return CUP$Parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // AUXCONSTANTESYPARAMETROS ::= E AUXCONSTANTESYPARAMETROS 
            {
              Nodo RESULT =null;

              CUP$Parser1$result = parser.getSymbolFactory().newSymbol("AUXCONSTANTESYPARAMETROS",9, ((java_cup.runtime.Symbol)CUP$Parser1$stack.elementAt(CUP$Parser1$top-1)), ((java_cup.runtime.Symbol)CUP$Parser1$stack.peek()), RESULT);
            }
          return CUP$Parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // AUXCONSTANTESYPARAMETROS ::= E coma AUXCONSTANTESYPARAMETROS 
            {
              Nodo RESULT =null;

              CUP$Parser1$result = parser.getSymbolFactory().newSymbol("AUXCONSTANTESYPARAMETROS",9, ((java_cup.runtime.Symbol)CUP$Parser1$stack.elementAt(CUP$Parser1$top-2)), ((java_cup.runtime.Symbol)CUP$Parser1$stack.peek()), RESULT);
            }
          return CUP$Parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CONSTANTESYPARAMETROS ::= E parentesisIzq E coma AUXCONSTANTESYPARAMETROS parentesisDer igual E puntoycoma CONSTANTESYPARAMETROS 
            {
              Nodo RESULT =null;

              CUP$Parser1$result = parser.getSymbolFactory().newSymbol("CONSTANTESYPARAMETROS",8, ((java_cup.runtime.Symbol)CUP$Parser1$stack.elementAt(CUP$Parser1$top-9)), ((java_cup.runtime.Symbol)CUP$Parser1$stack.peek()), RESULT);
            }
          return CUP$Parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CONSTANTESYPARAMETROS ::= E parentesisIzq E parentesisDer igual E puntoycoma CONSTANTESYPARAMETROS 
            {
              Nodo RESULT =null;

              CUP$Parser1$result = parser.getSymbolFactory().newSymbol("CONSTANTESYPARAMETROS",8, ((java_cup.runtime.Symbol)CUP$Parser1$stack.elementAt(CUP$Parser1$top-7)), ((java_cup.runtime.Symbol)CUP$Parser1$stack.peek()), RESULT);
            }
          return CUP$Parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CONSTANTESYPARAMETROS ::= E parentesisIzq E parentesisDer puntoycoma CONSTANTESYPARAMETROS 
            {
              Nodo RESULT =null;

              CUP$Parser1$result = parser.getSymbolFactory().newSymbol("CONSTANTESYPARAMETROS",8, ((java_cup.runtime.Symbol)CUP$Parser1$stack.elementAt(CUP$Parser1$top-5)), ((java_cup.runtime.Symbol)CUP$Parser1$stack.peek()), RESULT);
            }
          return CUP$Parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CONSTANTESYPARAMETROS ::= RCons E igual E puntoycoma CONSTANTESYPARAMETROS 
            {
              Nodo RESULT =null;

              CUP$Parser1$result = parser.getSymbolFactory().newSymbol("CONSTANTESYPARAMETROS",8, ((java_cup.runtime.Symbol)CUP$Parser1$stack.elementAt(CUP$Parser1$top-5)), ((java_cup.runtime.Symbol)CUP$Parser1$stack.peek()), RESULT);
            }
          return CUP$Parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CUERPO2 ::= 
            {
              Nodo RESULT =null;

              CUP$Parser1$result = parser.getSymbolFactory().newSymbol("CUERPO2",7, ((java_cup.runtime.Symbol)CUP$Parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser1$stack.peek()), RESULT);
            }
          return CUP$Parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CUERPO2 ::= error 
            {
              Nodo RESULT =null;

              CUP$Parser1$result = parser.getSymbolFactory().newSymbol("CUERPO2",7, ((java_cup.runtime.Symbol)CUP$Parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser1$stack.peek()), RESULT);
            }
          return CUP$Parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CUERPO2 ::= CUERPO2 RDireccionA E RDireccionC 
            {
              Nodo RESULT =null;

              CUP$Parser1$result = parser.getSymbolFactory().newSymbol("CUERPO2",7, ((java_cup.runtime.Symbol)CUP$Parser1$stack.elementAt(CUP$Parser1$top-3)), ((java_cup.runtime.Symbol)CUP$Parser1$stack.peek()), RESULT);
            }
          return CUP$Parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CUERPO2 ::= CUERPO2 REmailA E RExtension REmailC 
            {
              Nodo RESULT =null;

              CUP$Parser1$result = parser.getSymbolFactory().newSymbol("CUERPO2",7, ((java_cup.runtime.Symbol)CUP$Parser1$stack.elementAt(CUP$Parser1$top-4)), ((java_cup.runtime.Symbol)CUP$Parser1$stack.peek()), RESULT);
            }
          return CUP$Parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CUERPO2 ::= CUERPO2 RTelefonoA E RTelefonoC 
            {
              Nodo RESULT =null;

              CUP$Parser1$result = parser.getSymbolFactory().newSymbol("CUERPO2",7, ((java_cup.runtime.Symbol)CUP$Parser1$stack.elementAt(CUP$Parser1$top-3)), ((java_cup.runtime.Symbol)CUP$Parser1$stack.peek()), RESULT);
            }
          return CUP$Parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CUERPO2 ::= CUERPO2 RPasswordA E RPasswordC 
            {
              Nodo RESULT =null;

              CUP$Parser1$result = parser.getSymbolFactory().newSymbol("CUERPO2",7, ((java_cup.runtime.Symbol)CUP$Parser1$stack.elementAt(CUP$Parser1$top-3)), ((java_cup.runtime.Symbol)CUP$Parser1$stack.peek()), RESULT);
            }
          return CUP$Parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CUERPO2 ::= CUERPO2 RApellidoA E RApellidoC 
            {
              Nodo RESULT =null;

              CUP$Parser1$result = parser.getSymbolFactory().newSymbol("CUERPO2",7, ((java_cup.runtime.Symbol)CUP$Parser1$stack.elementAt(CUP$Parser1$top-3)), ((java_cup.runtime.Symbol)CUP$Parser1$stack.peek()), RESULT);
            }
          return CUP$Parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CUERPO2 ::= CUERPO2 RNombreA E RNombreC 
            {
              Nodo RESULT =null;

              CUP$Parser1$result = parser.getSymbolFactory().newSymbol("CUERPO2",7, ((java_cup.runtime.Symbol)CUP$Parser1$stack.elementAt(CUP$Parser1$top-3)), ((java_cup.runtime.Symbol)CUP$Parser1$stack.peek()), RESULT);
            }
          return CUP$Parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CUERPO2 ::= CUERPO2 RPalabraIdA E RPalabraIdC 
            {
              Nodo RESULT =null;

              CUP$Parser1$result = parser.getSymbolFactory().newSymbol("CUERPO2",7, ((java_cup.runtime.Symbol)CUP$Parser1$stack.elementAt(CUP$Parser1$top-3)), ((java_cup.runtime.Symbol)CUP$Parser1$stack.peek()), RESULT);
            }
          return CUP$Parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CUERPO1 ::= 
            {
              Nodo RESULT =null;

              CUP$Parser1$result = parser.getSymbolFactory().newSymbol("CUERPO1",6, ((java_cup.runtime.Symbol)CUP$Parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser1$stack.peek()), RESULT);
            }
          return CUP$Parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CUERPO1 ::= error 
            {
              Nodo RESULT =null;

              CUP$Parser1$result = parser.getSymbolFactory().newSymbol("CUERPO1",6, ((java_cup.runtime.Symbol)CUP$Parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser1$stack.peek()), RESULT);
            }
          return CUP$Parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CUERPO1 ::= CUERPO1 RPasswordA E RPasswordC 
            {
              Nodo RESULT =null;

              CUP$Parser1$result = parser.getSymbolFactory().newSymbol("CUERPO1",6, ((java_cup.runtime.Symbol)CUP$Parser1$stack.elementAt(CUP$Parser1$top-3)), ((java_cup.runtime.Symbol)CUP$Parser1$stack.peek()), RESULT);
            }
          return CUP$Parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CUERPO1 ::= CUERPO1 RPalabraIdA E RPalabraIdC 
            {
              Nodo RESULT =null;

              CUP$Parser1$result = parser.getSymbolFactory().newSymbol("CUERPO1",6, ((java_cup.runtime.Symbol)CUP$Parser1$stack.elementAt(CUP$Parser1$top-3)), ((java_cup.runtime.Symbol)CUP$Parser1$stack.peek()), RESULT);
            }
          return CUP$Parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ACCIONESMATE ::= 
            {
              Nodo RESULT =null;

              CUP$Parser1$result = parser.getSymbolFactory().newSymbol("ACCIONESMATE",5, ((java_cup.runtime.Symbol)CUP$Parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser1$stack.peek()), RESULT);
            }
          return CUP$Parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ACCIONESMATE ::= error 
            {
              Nodo RESULT =null;

              CUP$Parser1$result = parser.getSymbolFactory().newSymbol("ACCIONESMATE",5, ((java_cup.runtime.Symbol)CUP$Parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser1$stack.peek()), RESULT);
            }
          return CUP$Parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ACCIONESMATE ::= CONSTANTESYPARAMETROS ACCIONESMATE 
            {
              Nodo RESULT =null;

              CUP$Parser1$result = parser.getSymbolFactory().newSymbol("ACCIONESMATE",5, ((java_cup.runtime.Symbol)CUP$Parser1$stack.elementAt(CUP$Parser1$top-1)), ((java_cup.runtime.Symbol)CUP$Parser1$stack.peek()), RESULT);
            }
          return CUP$Parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ACCIONES ::= 
            {
              Nodo RESULT =null;

              CUP$Parser1$result = parser.getSymbolFactory().newSymbol("ACCIONES",4, ((java_cup.runtime.Symbol)CUP$Parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser1$stack.peek()), RESULT);
            }
          return CUP$Parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ACCIONES ::= RCrearUA CUERPO2 RCrearUC ACCIONES 
            {
              Nodo RESULT =null;

              CUP$Parser1$result = parser.getSymbolFactory().newSymbol("ACCIONES",4, ((java_cup.runtime.Symbol)CUP$Parser1$stack.elementAt(CUP$Parser1$top-3)), ((java_cup.runtime.Symbol)CUP$Parser1$stack.peek()), RESULT);
            }
          return CUP$Parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ACCIONES ::= RInicioUA CUERPO1 RInicioUC ACCIONES 
            {
              Nodo RESULT =null;

              CUP$Parser1$result = parser.getSymbolFactory().newSymbol("ACCIONES",4, ((java_cup.runtime.Symbol)CUP$Parser1$stack.elementAt(CUP$Parser1$top-3)), ((java_cup.runtime.Symbol)CUP$Parser1$stack.peek()), RESULT);
            }
          return CUP$Parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LOGIN ::= error 
            {
              Nodo RESULT =null;

              CUP$Parser1$result = parser.getSymbolFactory().newSymbol("LOGIN",1, ((java_cup.runtime.Symbol)CUP$Parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser1$stack.peek()), RESULT);
            }
          return CUP$Parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LOGIN ::= dolar RMate RNombre igual tstring dolar ACCIONESMATE RMateC 
            {
              Nodo RESULT =null;
		int rmleft = ((java_cup.runtime.Symbol)CUP$Parser1$stack.elementAt(CUP$Parser1$top-6)).left;
		int rmright = ((java_cup.runtime.Symbol)CUP$Parser1$stack.elementAt(CUP$Parser1$top-6)).right;
		Object rm = (Object)((java_cup.runtime.Symbol) CUP$Parser1$stack.elementAt(CUP$Parser1$top-6)).value;
		int accmleft = ((java_cup.runtime.Symbol)CUP$Parser1$stack.elementAt(CUP$Parser1$top-1)).left;
		int accmright = ((java_cup.runtime.Symbol)CUP$Parser1$stack.elementAt(CUP$Parser1$top-1)).right;
		Nodo accm = (Nodo)((java_cup.runtime.Symbol) CUP$Parser1$stack.elementAt(CUP$Parser1$top-1)).value;
		
            Nodo cuerpoacc = new Nodo("acciones", rmright, rmleft);
            cuerpoacc.hijos.add(accm);
            RESULT = cuerpoacc;
            
    
              CUP$Parser1$result = parser.getSymbolFactory().newSymbol("LOGIN",1, ((java_cup.runtime.Symbol)CUP$Parser1$stack.elementAt(CUP$Parser1$top-7)), ((java_cup.runtime.Symbol)CUP$Parser1$stack.peek()), RESULT);
            }
          return CUP$Parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LOGIN ::= RRequestA ACCIONES RRequestC 
            {
              Nodo RESULT =null;
		int rrleft = ((java_cup.runtime.Symbol)CUP$Parser1$stack.elementAt(CUP$Parser1$top-2)).left;
		int rrright = ((java_cup.runtime.Symbol)CUP$Parser1$stack.elementAt(CUP$Parser1$top-2)).right;
		Object rr = (Object)((java_cup.runtime.Symbol) CUP$Parser1$stack.elementAt(CUP$Parser1$top-2)).value;
		int accleft = ((java_cup.runtime.Symbol)CUP$Parser1$stack.elementAt(CUP$Parser1$top-1)).left;
		int accright = ((java_cup.runtime.Symbol)CUP$Parser1$stack.elementAt(CUP$Parser1$top-1)).right;
		Nodo acc = (Nodo)((java_cup.runtime.Symbol) CUP$Parser1$stack.elementAt(CUP$Parser1$top-1)).value;
		
            Nodo cuerpo = new Nodo("acciones", rrright, rrleft);
            cuerpo.hijos.add(acc);
            RESULT = cuerpo;
        
              CUP$Parser1$result = parser.getSymbolFactory().newSymbol("LOGIN",1, ((java_cup.runtime.Symbol)CUP$Parser1$stack.elementAt(CUP$Parser1$top-2)), ((java_cup.runtime.Symbol)CUP$Parser1$stack.peek()), RESULT);
            }
          return CUP$Parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= error INICIO 
            {
              Nodo RESULT =null;

              CUP$Parser1$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Parser1$stack.elementAt(CUP$Parser1$top-1)), ((java_cup.runtime.Symbol)CUP$Parser1$stack.peek()), RESULT);
            }
          return CUP$Parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= LOGIN 
            {
              Nodo RESULT =null;
		int raizleft = ((java_cup.runtime.Symbol)CUP$Parser1$stack.peek()).left;
		int raizright = ((java_cup.runtime.Symbol)CUP$Parser1$stack.peek()).right;
		Nodo raiz = (Nodo)((java_cup.runtime.Symbol) CUP$Parser1$stack.peek()).value;
		
        parser.raiz=raiz;
    
              CUP$Parser1$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser1$stack.peek()), RESULT);
            }
          return CUP$Parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser1$stack.elementAt(CUP$Parser1$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser1$stack.elementAt(CUP$Parser1$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$Parser1$stack.elementAt(CUP$Parser1$top-1)).value;
		RESULT = start_val;
              CUP$Parser1$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser1$stack.elementAt(CUP$Parser1$top-1)), ((java_cup.runtime.Symbol)CUP$Parser1$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser1$parser.done_parsing();
          return CUP$Parser1$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

